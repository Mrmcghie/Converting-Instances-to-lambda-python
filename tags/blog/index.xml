<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Dave's DevOps blog</title><link>https://davehart.co.uk/tags/blog/</link><description>Recent content in Blog on Dave's DevOps blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 06 Oct 2020 08:08:11 +0000</lastBuildDate><atom:link href="https://davehart.co.uk/tags/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Backups, monitoring and maintenance. Keep that blog alive!</title><link>https://davehart.co.uk/post/backups-monitoring-and-maintenance-keep-that-blog-alive/</link><pubDate>Tue, 06 Oct 2020 08:08:11 +0000</pubDate><guid>https://davehart.co.uk/post/backups-monitoring-and-maintenance-keep-that-blog-alive/</guid><description>Our demo WordPress site (part 1 &amp;amp; part 2) is now hosting publicly available content (This page for example). You have written a number of posts, have a few in draft and finally found a theme you liked. What next? Lets discuss backup, swapfile, snapshots, monitoring and certificates.
Backup Last thing you want is to have thrown your heart and sole into a number of posts only for the EC2 instance to crash and you lose all that work.</description></item><item><title>EC2 inventory using AWS Lambda and Python</title><link>https://davehart.co.uk/post/ec2-inventory-using-aws-lambda-and-python/</link><pubDate>Mon, 05 Oct 2020 07:25:24 +0000</pubDate><guid>https://davehart.co.uk/post/ec2-inventory-using-aws-lambda-and-python/</guid><description>A long while back I wrote a PowerShell script to produce a CSV file of EC2 instances across multiple accounts. The original PowerShell script was running on a Windows server as a scheduled task, oh how we have moved on. About 6 months ago I rewrote the script in Python and then moved it over to AWS Lambda. This was my first really opportunity to use AWS Lambda to execute code in a (Misnomer alert!!) serverless compute service.</description></item><item><title>Terminate EC2 instance by tag using Python</title><link>https://davehart.co.uk/post/terminate-ec2-instance-by-tag-using-python/</link><pubDate>Fri, 25 Sep 2020 17:35:22 +0000</pubDate><guid>https://davehart.co.uk/post/terminate-ec2-instance-by-tag-using-python/</guid><description>I originally developed this script in bash for a GoCD pipeline. The intention of the script is to decommission instances in batch whilst generating a final snapshot. For those of you that wonder why is Terraform not being used? (You know who you are) Good question. Not everyone is using Terraform yet and refactoring/importing deployment methods will incur costs which some clients are not prepared to pay.
Why change it? The move to Python was a logical one for me, it removes any OS dependency and I also see this as good excuse to practice my Python.</description></item><item><title>Terraform, AWS and WordPress â€“ Part II</title><link>https://davehart.co.uk/post/terraform-aws-and-wordpress-part-ii/</link><pubDate>Mon, 21 Sep 2020 16:27:29 +0000</pubDate><guid>https://davehart.co.uk/post/terraform-aws-and-wordpress-part-ii/</guid><description>This is a continuation of Terraform, AWS and WordPress - Part I. Let look deeper under the covers and focus on what the bootstrap part of the deployment is doing.
user_data Just as a refresher, the userdata defined on an AWS EC2 instance is used to run commands or scripts on the instance when deployed. As we are deploying an Amazon Linux EC2 instance the commands will reflect this Operating System.
Setting the scene So lets carve the user_data into something we can read and work with and pop some remarks in.</description></item><item><title>First! Terraform, AWS and WordPress - Part I</title><link>https://davehart.co.uk/post/terraform-aws-wordpress/</link><pubDate>Sat, 19 Sep 2020 02:59:40 +0000</pubDate><guid>https://davehart.co.uk/post/terraform-aws-wordpress/</guid><description>Well here we go then, where to start? It seemed only fitting that the first post covers the fun I had setting up this WordPress server and site. I looked around at some of the options available, payed hosting etc and decided that &amp;ldquo;hey, lets learn something and share the experience at the same time&amp;rdquo;. Rather than manually setting up and configure the server (easy), I decided to try automate it as much as possible.</description></item></channel></rss>