<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vsftpd on Dave's DevOps blog</title><link>https://daveihart.github.io/davehart.co.uk/tags/vsftpd/</link><description>Recent content in vsftpd on Dave's DevOps blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 21 Sep 2020 16:27:29 +0000</lastBuildDate><atom:link href="https://daveihart.github.io/davehart.co.uk/tags/vsftpd/index.xml" rel="self" type="application/rss+xml"/><item><title>Terraform, AWS and WordPress â€“ Part II</title><link>https://daveihart.github.io/davehart.co.uk/post/terraform-aws-and-wordpress-part-ii/</link><pubDate>Mon, 21 Sep 2020 16:27:29 +0000</pubDate><guid>https://daveihart.github.io/davehart.co.uk/post/terraform-aws-and-wordpress-part-ii/</guid><description>This is a continuation of Terraform, AWS and WordPress - Part I. Let look deeper under the covers and focus on what the bootstrap part of the deployment is doing.
user_data Just as a refresher, the userdata defined on an AWS EC2 instance is used to run commands or scripts on the instance when deployed. As we are deploying an Amazon Linux EC2 instance the commands will reflect this Operating System.
Setting the scene So lets carve the user_data into something we can read and work with and pop some remarks in.</description></item></channel></rss>