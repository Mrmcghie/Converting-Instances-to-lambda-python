<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>shell on Dave's DevOps blog</title><link>https://daveihart.github.io/davehart.co.uk/tags/shell/</link><description>Recent content in shell on Dave's DevOps blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 15 Jan 2021 16:04:10 +0000</lastBuildDate><atom:link href="https://daveihart.github.io/davehart.co.uk/tags/shell/index.xml" rel="self" type="application/rss+xml"/><item><title>Automation: Apache and Route 53</title><link>https://daveihart.github.io/davehart.co.uk/post/automation-apache-and-route-53/</link><pubDate>Fri, 15 Jan 2021 16:04:10 +0000</pubDate><guid>https://daveihart.github.io/davehart.co.uk/post/automation-apache-and-route-53/</guid><description>This solution consisted of a Route53 hosted zone with A-records directing traffic to an AWS EIP (Elastic IP Address) hosted on a firewall appliance (Fortinet). The firewall had a VIP rule to forward requests received on that EIP to the Apache reverse proxy.
A regular activity I had to perform for one of my clients was setting up apache reverse proxy services for their development environments. This involved defining a subdomain name for an application, creating an A-record on AWS Route53 and then configuring the rewrite rules which varied per application type.</description></item><item><title>Terraform, AWS and WordPress â€“ Part II</title><link>https://daveihart.github.io/davehart.co.uk/post/terraform-aws-and-wordpress-part-ii/</link><pubDate>Mon, 21 Sep 2020 16:27:29 +0000</pubDate><guid>https://daveihart.github.io/davehart.co.uk/post/terraform-aws-and-wordpress-part-ii/</guid><description>This is a continuation of Terraform, AWS and WordPress - Part I. Let look deeper under the covers and focus on what the bootstrap part of the deployment is doing.
user_data Just as a refresher, the userdata defined on an AWS EC2 instance is used to run commands or scripts on the instance when deployed. As we are deploying an Amazon Linux EC2 instance the commands will reflect this Operating System.
Setting the scene So lets carve the user_data into something we can read and work with and pop some remarks in.</description></item><item><title>First! Terraform, AWS and WordPress - Part I</title><link>https://daveihart.github.io/davehart.co.uk/post/terraform-aws-wordpress/</link><pubDate>Sat, 19 Sep 2020 02:59:40 +0000</pubDate><guid>https://daveihart.github.io/davehart.co.uk/post/terraform-aws-wordpress/</guid><description>Well here we go then, where to start? It seemed only fitting that the first post covers the fun I had setting up this WordPress server and site. I looked around at some of the options available, payed hosting etc and decided that &amp;ldquo;hey, lets learn something and share the experience at the same time&amp;rdquo;. Rather than manually setting up and configure the server (easy), I decided to try automate it as much as possible.</description></item></channel></rss>