<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS on Dave's DevOps blog</title><link>https://davehart.co.uk/tags/aws/</link><description>Recent content in AWS on Dave's DevOps blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 09 Apr 2021 14:49:11 +0000</lastBuildDate><atom:link href="https://davehart.co.uk/tags/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Terraform: Multi-cloud demo – Part 4 – AWS Instances</title><link>https://davehart.co.uk/post/terraform-multi-cloud-demo-part-4-aws-instances/</link><pubDate>Fri, 09 Apr 2021 14:49:11 +0000</pubDate><guid>https://davehart.co.uk/post/terraform-multi-cloud-demo-part-4-aws-instances/</guid><description>Now we have our security groups and instance profile, lets look at creating our ec2 instances. We will be defining our own module which fits our requirements and introducing userdata and templatefile functions.
First we will setup and configure our modules main.tf (modules/instances/main.tf)
Module : instances 1 2 3 4 5 6 7 8 9 10 11 12 13 14 terraform { required_version =&amp;#34;&amp;gt;=0.14.8&amp;#34; } resource &amp;#34;aws_instance&amp;#34; &amp;#34;instance&amp;#34; {# aws_instance resource type ami = var.</description></item><item><title>Terraform: Multi-cloud demo – Part 3 – AWS Infrastructure</title><link>https://davehart.co.uk/post/terraform-multi-cloud-demo-part-3-aws-infrastructure/</link><pubDate>Fri, 09 Apr 2021 11:23:40 +0000</pubDate><guid>https://davehart.co.uk/post/terraform-multi-cloud-demo-part-3-aws-infrastructure/</guid><description>It&amp;rsquo;s going well so far. We have our source control defined and updated and our Terraform remote state hosted on Azure Storage which we provisioned using Terraform. Let&amp;rsquo;s now move onto provisioning our AWS infrastructure.
Root module main.tf First off we need to add the aws provider;
1 2 3 4 provider &amp;#34;aws&amp;#34; { region = var.region profile = var.profile } You will notice that we have also used a couple of variables with this provider.</description></item><item><title>Terraform: Multi-cloud demo - Part 1 - Foundations</title><link>https://davehart.co.uk/post/terraform-multi-cloud-demo-part-1-foundations/</link><pubDate>Fri, 26 Mar 2021 15:40:13 +0000</pubDate><guid>https://davehart.co.uk/post/terraform-multi-cloud-demo-part-1-foundations/</guid><description>I have been fortunate enough to be given an opportunity to help colleagues at my workplace on their journey to HashiCorp Terraform Associate Certification.
As part of the training track being put together (Mostly centred around the great Pluralsight training material from Ned Bellavance) it seemed a demonstration of some of the capabilities of Terraform would be beneficial for those on their learning journey. I decided to write this article as it will supplement the live demo I will be performing on one of the training sessions and may be of use to anyone else on their journey.</description></item><item><title>Automation: Apache and Route 53</title><link>https://davehart.co.uk/post/automation-apache-and-route-53/</link><pubDate>Fri, 15 Jan 2021 16:04:10 +0000</pubDate><guid>https://davehart.co.uk/post/automation-apache-and-route-53/</guid><description>This solution consisted of a Route53 hosted zone with A-records directing traffic to an AWS EIP (Elastic IP Address) hosted on a firewall appliance (Fortinet). The firewall had a VIP rule to forward requests received on that EIP to the Apache reverse proxy.
A regular activity I had to perform for one of my clients was setting up apache reverse proxy services for their development environments. This involved defining a subdomain name for an application, creating an A-record on AWS Route53 and then configuring the rewrite rules which varied per application type.</description></item><item><title>Encrypting EBS volumes programmatically with python</title><link>https://davehart.co.uk/post/encrypting-ebs-volumes-programmatically-python/</link><pubDate>Mon, 26 Oct 2020 18:42:52 +0000</pubDate><guid>https://davehart.co.uk/post/encrypting-ebs-volumes-programmatically-python/</guid><description>Encrypting attached AWS EBS volume involves a number of steps. This article will show you how to encrypt your volumes using python.
Let&amp;rsquo;s set the scene, you have an environment hosting a number of AWS EC2 instances and now security have said, &amp;ldquo;Hey, these EBS volumes should be encrypted!&amp;rdquo; No argument from me. So how do we go about this programmatically.
You can enable default volume encryption in the management console. Check this link out on how to do it.</description></item><item><title>Backups, monitoring and maintenance. Keep that blog alive!</title><link>https://davehart.co.uk/post/backups-monitoring-and-maintenance-keep-that-blog-alive/</link><pubDate>Tue, 06 Oct 2020 08:08:11 +0000</pubDate><guid>https://davehart.co.uk/post/backups-monitoring-and-maintenance-keep-that-blog-alive/</guid><description>Our demo WordPress site (part 1 &amp;amp; part 2) is now hosting publicly available content (This page for example). You have written a number of posts, have a few in draft and finally found a theme you liked. What next? Lets discuss backup, swapfile, snapshots, monitoring and certificates.
Backup Last thing you want is to have thrown your heart and sole into a number of posts only for the EC2 instance to crash and you lose all that work.</description></item><item><title>EC2 inventory using AWS Lambda and Python</title><link>https://davehart.co.uk/post/ec2-inventory-using-aws-lambda-and-python/</link><pubDate>Mon, 05 Oct 2020 07:25:24 +0000</pubDate><guid>https://davehart.co.uk/post/ec2-inventory-using-aws-lambda-and-python/</guid><description>A long while back I wrote a PowerShell script to produce a CSV file of EC2 instances across multiple accounts. The original PowerShell script was running on a Windows server as a scheduled task, oh how we have moved on. About 6 months ago I rewrote the script in Python and then moved it over to AWS Lambda. This was my first really opportunity to use AWS Lambda to execute code in a (Misnomer alert!!) serverless compute service.</description></item><item><title>Terminate EC2 instance by tag using Python</title><link>https://davehart.co.uk/post/terminate-ec2-instance-by-tag-using-python/</link><pubDate>Fri, 25 Sep 2020 17:35:22 +0000</pubDate><guid>https://davehart.co.uk/post/terminate-ec2-instance-by-tag-using-python/</guid><description>I originally developed this script in bash for a GoCD pipeline. The intention of the script is to decommission instances in batch whilst generating a final snapshot. For those of you that wonder why is Terraform not being used? (You know who you are) Good question. Not everyone is using Terraform yet and refactoring/importing deployment methods will incur costs which some clients are not prepared to pay.
Why change it? The move to Python was a logical one for me, it removes any OS dependency and I also see this as good excuse to practice my Python.</description></item><item><title>Terraform, AWS and WordPress – Part II</title><link>https://davehart.co.uk/post/terraform-aws-and-wordpress-part-ii/</link><pubDate>Mon, 21 Sep 2020 16:27:29 +0000</pubDate><guid>https://davehart.co.uk/post/terraform-aws-and-wordpress-part-ii/</guid><description>This is a continuation of Terraform, AWS and WordPress - Part I. Let look deeper under the covers and focus on what the bootstrap part of the deployment is doing.
user_data Just as a refresher, the userdata defined on an AWS EC2 instance is used to run commands or scripts on the instance when deployed. As we are deploying an Amazon Linux EC2 instance the commands will reflect this Operating System.
Setting the scene So lets carve the user_data into something we can read and work with and pop some remarks in.</description></item><item><title>First! Terraform, AWS and WordPress - Part I</title><link>https://davehart.co.uk/post/terraform-aws-wordpress/</link><pubDate>Sat, 19 Sep 2020 02:59:40 +0000</pubDate><guid>https://davehart.co.uk/post/terraform-aws-wordpress/</guid><description>Well here we go then, where to start? It seemed only fitting that the first post covers the fun I had setting up this WordPress server and site. I looked around at some of the options available, payed hosting etc and decided that &amp;ldquo;hey, lets learn something and share the experience at the same time&amp;rdquo;. Rather than manually setting up and configure the server (easy), I decided to try automate it as much as possible.</description></item></channel></rss>